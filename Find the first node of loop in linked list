Given a singly linked list of N nodes. Find the first node of the loop if the linked list has a loop. If a loop is present return the node data of the first 
node of the loop else return -1.

Example 1:

Input:

Output: 3
Explanation:
We can see that there exists a loop 
in the given linked list and the first
node of the loop is 3.


Solution:

int findFirstNode(Node* head)
    {
        if(!head || !head->next)
          return -1;
        bool flag=false;
        Node* slow=head;
        Node* fast=head;
        while(fast!=NULL and fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast)
            { 
               flag=1;
               break;
                   
            }
        }
        if(flag)
        {
            Node* temp=head;
           while(temp!=slow)
           {
            temp=temp->next;
            slow=slow->next;
           }
            return slow->data;
        }
        
        return -1;
    }
