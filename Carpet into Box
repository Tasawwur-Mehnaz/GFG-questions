There is a carpet of a size a*b [length * breadth]. You are given a box of size c*d. The task is, one has to fit the carpet in the box in a minimum number 
of moves. 
In one move, you can either decrease the length or the breadth of the carpet by half (floor value of its half).
Note: One can even turn the carpet by 90 degrees any number of times, wont be counted as a move.


Example 1:

Input:
A = 8, B = 13
C = 6, D = 10
Output:
Minimum number of moves: 1
Explanation:
Fold the carpet by breadth, 13/2 i.e. 6, 
so now carpet is 6*8 and can fit fine.


Solution:

int process(int a,int b,int c,int d)
    {
        int count=0;
        while(a>c)
        {
            a/=2;
            count++;
        }
        while(b>d)
        {
            b/=2;
            count++;
        }
        return count;
    }
    int carpetBox(int a, int b, int c, int d){
      if(a*b<=c*d && (a<=c || a<=d) && (b<=c || b<=d))
        return 0;

      return min(process(a,b,c,d),process(b,a,c,d));
    }
