Given the chessboard dimensions. Find out the number of ways we can place a black and a white Knight on this chessboard such that they cannot attack each other.

Note:
The knights have to be placed on different squares. A knight can move two squares horizontally and one square vertically (L shaped), or two squares vertically 
and one square horizontally (L shaped). The knights attack each other if one can reach the other in one move.

Example 1:

Input:
N = 2, M = 2
Output: 12 
Explanation: There are 12 ways we can place a black and a white Knight on this chessboard such that they cannot attack each other.


Solution:

long long numOfWays(int n, int m)
{
    long long mod=1000000000+7;
    long long total=(long long)(m*n);
    total=total*(total-1);
    long long ans=0;
    for(int r=1;r<=n;r++)
    {
        for(int c=1;c<=m;c++)
        {
            if(r+1<=n && c+2<=m){ans++;}
            if(r+1<=n && c-2>0){ans++;}
            if(r-1>0 && c+2<=m){ans++;}
            if(r-1>0 && c-2>0){ans++;}
            if(r+2<=n && c+1<=m){ans++;}
            if(r+2<=n && c-1>0){ans++;}
            if(r-2>0 && c+1<=m){ans++;}
            if(r-2>0 && c-1>0){ans++;}
        }
    }
    return (total-ans)%mod;
}


Another Solution:

long long numOfWays(int N, int M)
{
    long long ans = (long long)(N * M - 1) * N * M;
 
    if (N >= 1 && M >= 2) 
    {
        // Attacks possible in one horizontal
        // and two vertical steps
        ans -= (4 * (N - 1) * (M - 2));
    }
    if (N >= 2 && M >= 1) 
    {
        // Attacks possible in Two horizontal
        // and one vertical steps
        ans -= (4 * (N - 2) * (M - 1));
    }
    return ans%1000000007;
}
