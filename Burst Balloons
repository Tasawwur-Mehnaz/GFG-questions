You are given N balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array arr. You are asked to brust all the balloons.
If you brust the ith  balloon,, you will get arr[ i - 1 ] * arr[ i ] * arr[ i + 1] coins. If i - 1, or i + 1 goes out of bounds of the array, consider it as if there is a balloon with a 1 painted on it.
Return the maximum coins you can collect by brusting the balloons wisely.

Example 1:

Input:
N = 4
arr[ ] = {3, 1, 5, 8}
Output: 167
Explanation: 
arr[ ] = {3, 1, 5, 8}  - - > {3, 5, 8} - - > {3, 8} - - > { 8} - -> { }
coins = 3 *1 *5,      +      3*5*8     +   1*3*8   +  1*8*1   = 167


Solution:

int process(int i,int j,vector<int> &arr,vector<vector<int>> &dp)
    {
        if(i>j)
        return 0;
        int maxi=INT_MIN;
        if(dp[i][j]!=-1)
         return dp[i][j];
         
        for(int ind=i;ind<=j;ind++)
        {
            int cost=arr[i-1]*arr[ind]*arr[j+1]+process(i,ind-1,arr,dp)+process(ind+1,j,arr,dp);
            maxi=max(maxi,cost);
        }
        return dp[i][j]=maxi;
    }
    int maxCoins(int n, vector<int> &arr) {
        arr.push_back(1);
        arr.insert(arr.begin(),1);
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        return process(1,n,arr,dp);
    }
