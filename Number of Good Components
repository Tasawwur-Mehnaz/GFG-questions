Given an undirected graph with V vertices(numbered from 1 to V) and E edges. Find the number of good components in the graph.
A component of the graph is good if and only if the component is a fully connected component.
Note: A fully connected component is a subgraph of a given graph such that there's an edge between every pair of vertices in a component, the given graph can be a 
disconnected graph. Consider the adjacency list from index 1.

Example 1:

Input: 

Output: 1
Explanation: We can see that there is only one 
component in the graph and in this component 
there is a edge between any two vertces.


Solution:

class Solution {
  public:
    void dfs (vector<vector<int>>& adj, int i, vector<int>&vis, vector<int>&temp)
    {
        temp.push_back(i);
        vis[i]++;
        
        for (auto it:adj[i])
        {
            if (!vis[it])
                dfs(adj,it,vis,temp);
        }
    }
    
    int findNumberOfGoodComponent(int v, vector<vector<int>>& adj) 
    {
        vector<int>vis(v+1,0);
        int ans = 0;
        for (int i=1; i<=v; i++)
        {
            if(!vis[i])
            {
                vector <int> temp;
                dfs(adj,i,vis, temp);
                
                bool flag = false;
                
                for(int i=0; i<temp.size(); i++)
                {
                    if(adj[temp[i]].size()<temp.size()-1)
                    {
                        flag = true;
                        break;
                    }
                }
                
                if(flag==false)
                    ans++;
            }
        }
        return ans;
     
    }
};
