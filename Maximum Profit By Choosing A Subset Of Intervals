Given a list intervals of n intervals, the ith element [s, e, p] denotes the starting point s, ending point e, and the profit p earned by choosing the ith interval. 
Find the maximum profit one can achieve by choosing a subset of non-overlapping intervals.
Two intervals [s1, e1, p1] and [s2, e2, p2] are said to be non-overlapping if [e1 <= s2] and [s1 < s2].

Example 1:

Input:
n = 3
intervals = {
{1, 2, 4},
{1, 5, 7},
{2, 4, 4}
}
Output:
8
Explanation:
One can choose intervals [1, 2, 4] and [2, 4, 4] for a 
profit of 8.



Solution:

static bool comp(vector<int>&a,vector<int>&b)
    {
        if(a[0]==b[0])
          return a[1]<b[1];
        else if(a[0]==b[0] && a[1]==b[1])
          return a[2]>b[2];
        else
          return a[0]<=b[0];
    }
    int maximum_profit(int n, vector<vector<int>> &intervals) {
        vector<int> dp(n);
        int ans=0;
        sort(intervals.begin(),intervals.end(),comp);
        for(int i=0;i<n;i++)
        {
            dp[i]=intervals[i][2];
            for(int j=0;j<i;j++)
            {
                if(intervals[j][1]<=intervals[i][0] && intervals[j][0]<intervals[i][0])
                  dp[i]=max(dp[i],dp[j]+intervals[i][2]);
            }
            ans=max(ans,dp[i]);
        }
        
        return ans;
    }
